{"version":3,"sources":["config.js","auth/index.js","core/cartHelpers.js","core/Menu.js","Routes.js","index.js"],"names":["API","process","isAuthenticated","undefined","window","localStorage","getItem","JSON","parse","itemTotal","reduce","curr","nextVal","Number","count","isActive","history","path","location","pathname","color","Routes","withRouter","useState","run","setRun","useEffect","className","to","style","user","role","onClick","next","removeItem","fetch","method","then","response","console","log","catch","err","signout","push","cursor","ReactDOM","render","document","getElementById"],"mappings":"gQAAaA,EAAMC,4BC+DNC,EAAkB,WAC7B,YAAqBC,UAAVC,WAGPC,aAAaC,QAAQ,QAChBC,KAAKC,MAAMH,aAAaC,QAAQ,UCvC9BG,EAAY,WACvB,GAAsB,qBAAXL,QACLC,aAAaC,QAAQ,QAKvB,OAJcC,KAAKC,MAAMH,aAAaC,QAAQ,SAC5BI,QAAO,SAACC,EAAMC,GAC9B,OAAQD,EAAQE,OAAOD,EAAQE,SAC9B,GAKP,OAAO,GChCHC,EAAW,SAACC,EAASC,GACzB,OAAID,EAAQE,SAASC,WAAaF,EACzB,CAAEG,MAAO,WAET,CAAEA,MAAO,YCmCLC,GD0EAC,aAvGF,SAAC,GAAiB,IAAfN,EAAc,EAAdA,QAAc,EACNO,oBAAS,GADH,mBACrBC,EADqB,KAChBC,EADgB,KAM5B,OAJAC,qBAAU,WACRD,GAAQD,KACP,CAACf,IAGF,6BACE,wBAAIkB,UAAU,2BACZ,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,WAAWE,MAAOd,EAASC,EAAS,MAA3D,SAIF,wBAAIW,UAAU,YACZ,kBAAC,IAAD,CACEC,GAAG,QACHD,UAAU,WACVE,MAAOd,EAASC,EAAS,UAH3B,SAQF,wBAAIW,UAAU,YACZ,kBAAC,IAAD,CACEC,GAAG,QACHD,UAAU,WACVE,MAAOd,EAASC,EAAS,UAH3B,OAKO,IACL,6BACE,2BAAOW,UAAU,cAAclB,QAIpCP,KAAqD,IAAhCA,IAAkB4B,KAAKC,MAC3C,wBAAIJ,UAAU,YACZ,kBAAC,IAAD,CACEC,GAAG,kBACHD,UAAU,WACVE,MAAOd,EAASC,EAAS,oBAH3B,cAUHd,KAAqD,IAAhCA,IAAkB4B,KAAKC,MAC3C,wBAAIJ,UAAU,YACZ,kBAAC,IAAD,CACEC,GAAG,mBACHD,UAAU,WACVE,MAAOd,EAASC,EAAS,qBAH3B,eAUFd,KACA,kBAAC,WAAD,KACE,wBAAIyB,UAAU,YACZ,kBAAC,IAAD,CACEC,GAAG,UACHD,UAAU,WACVE,MAAOd,EAASC,EAAS,YAH3B,WAQF,wBAAIW,UAAU,YACZ,kBAAC,IAAD,CACEC,GAAG,UACHD,UAAU,WACVE,MAAOd,EAASC,EAAS,YAH3B,YAULd,KACC,kBAAC,WAAD,KACE,wBAAIyB,UAAU,YACZ,0BACEK,QAAS,kBFtDF,SAACC,GACtB,GAAsB,qBAAX7B,OAGT,OAFAC,aAAa6B,WAAW,OACxBD,IACOE,MAAM,GAAD,OAAInC,EAAJ,YAAmB,CAC7BoC,OAAQ,QAEPC,MAAK,SAACC,GACLC,QAAQC,IAAgBF,MAEzBG,OAAM,SAACC,GAAD,OAASH,QAAQC,IAAIE,ME6ChBC,EAAQ,WACN3B,EAAQ4B,KAAK,eAGjBjB,UAAU,WACVE,MAAO,CAAEgB,OAAQ,UAAWzB,MAAO,YAPrC,kB,0CCnFC,cCdf0B,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,W","file":"static/js/main.4c66e0da.chunk.js","sourcesContent":["export const API = process.env.REACT_APP_API_URL;\r\n","import { API } from \"../config\";\r\n\r\n/* signup is called like this: signup({ name, email, password }).\r\n        The {name, email, password} is an object that is destructured*/\r\n\r\nexport const signup = (user) => {\r\n  /* instead of using axios, we are using fetch. You must return the \"fetch\"\r\n            otherwise you will reeive an error*/\r\n  return fetch(`${API}/signup`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n\r\n    body: JSON.stringify(user),\r\n  })\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const signin = (user) => {\r\n  return fetch(`${API}/signin`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n\r\n    body: JSON.stringify(user),\r\n  })\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const authenticate = (data, next) => {\r\n  //in the local storage (browser), the we set a property \"jwt\" to the \"data\"\r\n  if (typeof window !== \"undefined\") {\r\n    localStorage.setItem(\"jwt\", JSON.stringify(data));\r\n  }\r\n  /*since this is middleware, we have to allow the next function to run. WE have \r\npass the next function into authenticate */\r\n  next();\r\n};\r\n\r\nexport const signout = (next) => {\r\n  if (typeof window !== \"undefined\") {\r\n    localStorage.removeItem(\"jwt\");\r\n    next();\r\n    return fetch(`${API}/signout`, {\r\n      method: \"GET\",\r\n    })\r\n      .then((response) => {\r\n        console.log((\"signout\", response));\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }\r\n};\r\n\r\nexport const isAuthenticated = () => {\r\n  if (typeof window == undefined) {\r\n    return false;\r\n  }\r\n  if (localStorage.getItem(\"jwt\")) {\r\n    return JSON.parse(localStorage.getItem(\"jwt\"));\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n","export const addItem = (item = [], count = 0, next = (f) => f) => {\r\n  let cart = [];\r\n  if (typeof window !== \"undefined\") {\r\n    if (localStorage.getItem(\"cart\")) {\r\n      cart = JSON.parse(localStorage.getItem(\"cart\"));\r\n    }\r\n    cart.push({\r\n      ...item,\r\n      count: 1,\r\n    });\r\n\r\n    // remove duplicates\r\n    // build an Array from new Set and turn it back into array using Array.from\r\n    // so that later we can re-map it\r\n    // new set will only allow unique values in it\r\n    // so pass the ids of each object/product\r\n    // If the loop tries to add the same value again, it'll get ignored\r\n    // ...with the array of ids we got on when first map() was used\r\n    // run map() on it again and return the actual product from the cart\r\n\r\n    cart = Array.from(new Set(cart.map((p) => p._id))).map((id) => {\r\n      return cart.find((p) => p._id === id);\r\n    });\r\n\r\n    localStorage.setItem(\"cart\", JSON.stringify(cart));\r\n    next();\r\n  }\r\n};\r\n\r\nexport const itemTotal = () => {\r\n  if (typeof window !== \"undefined\") {\r\n    if (localStorage.getItem(\"cart\")) {\r\n      const array = JSON.parse(localStorage.getItem(\"cart\"));\r\n      const sum = array.reduce((curr, nextVal) => {\r\n        return (curr += Number(nextVal.count));\r\n      }, 0);\r\n      return sum;\r\n      //   return JSON.parse(localStorage.getItem(\"cart\")).length;\r\n    }\r\n  }\r\n  return 0;\r\n};\r\n\r\nexport const getCart = () => {\r\n  if (typeof window !== \"undefined\") {\r\n    if (localStorage.getItem(\"cart\")) {\r\n      return JSON.parse(localStorage.getItem(\"cart\"));\r\n    }\r\n  }\r\n  return [];\r\n};\r\n\r\nexport const updateItem = (productId, count) => {\r\n  //update quantity in local storage\r\n  let cart = [];\r\n  if (typeof window !== \"undefined\") {\r\n    if (localStorage.getItem(\"cart\")) {\r\n      cart = JSON.parse(localStorage.getItem(\"cart\"));\r\n    }\r\n    cart.map((product, i) => {\r\n      if (product._id === productId) {\r\n        cart[i].count = count;\r\n      }\r\n    });\r\n    localStorage.setItem(\"cart\", JSON.stringify(cart));\r\n  }\r\n};\r\n\r\nexport const removeItem = (productId) => {\r\n  let cart = [];\r\n  if (typeof window !== \"undefined\") {\r\n    if (localStorage.getItem(\"cart\")) {\r\n      cart = JSON.parse(localStorage.getItem(\"cart\"));\r\n    }\r\n    cart.map((product, i) => {\r\n      if (product._id === productId) {\r\n        cart.splice(i, 1);\r\n      }\r\n    });\r\n    localStorage.setItem(\"cart\", JSON.stringify(cart));\r\n  }\r\n  return cart;\r\n};\r\n\r\nexport const emptyCart = (next) => {\r\n  if (typeof window !== \"undefined\") {\r\n    localStorage.removeItem(\"cart\");\r\n    next();\r\n  }\r\n};\r\n","import React, { Fragment, useEffect, useState } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport { signout, isAuthenticated } from \"../auth\";\r\nimport { itemTotal } from \"./cartHelpers\";\r\n\r\n/* history is the path you are at. Therefore, when you are at /signin,\r\nthe history will be /signin. Therefore, when the history equals the specified route,\r\nit will be considered the active class */\r\nconst isActive = (history, path) => {\r\n  if (history.location.pathname === path) {\r\n    return { color: \"#ff9900\" };\r\n  } else {\r\n    return { color: \"#ffffff\" };\r\n  }\r\n};\r\n\r\n/*since we are using BrowserRouter, we have access to the history in the props.\r\nThe history is an object that contains the current path. We destructure the props to history*/\r\nconst Menu = ({ history }) => {\r\n  const [run, setRun] = useState(false);\r\n  useEffect(() => {\r\n    setRun(!run);\r\n  }, [itemTotal]);\r\n\r\n  return (\r\n    <div>\r\n      <ul className=\"nav nav-tabs bg-primary\">\r\n        <li className=\"nav-item\">\r\n          <Link to=\"/\" className=\"nav-link\" style={isActive(history, \"/\")}>\r\n            Home\r\n          </Link>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Link\r\n            to=\"/shop\"\r\n            className=\"nav-link\"\r\n            style={isActive(history, \"/shop\")}\r\n          >\r\n            Shop\r\n          </Link>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Link\r\n            to=\"/cart\"\r\n            className=\"nav-link\"\r\n            style={isActive(history, \"/cart\")}\r\n          >\r\n            Cart{\" \"}\r\n            <sup>\r\n              <small className=\"cart-badge\">{itemTotal()}</small>\r\n            </sup>\r\n          </Link>\r\n        </li>\r\n        {isAuthenticated() && isAuthenticated().user.role === 0 && (\r\n          <li className=\"nav-item\">\r\n            <Link\r\n              to=\"/user/dashboard\"\r\n              className=\"nav-link\"\r\n              style={isActive(history, \"/user/dashboard\")}\r\n            >\r\n              Dashboard\r\n            </Link>\r\n          </li>\r\n        )}\r\n\r\n        {isAuthenticated() && isAuthenticated().user.role === 1 && (\r\n          <li className=\"nav-item\">\r\n            <Link\r\n              to=\"/admin/dashboard\"\r\n              className=\"nav-link\"\r\n              style={isActive(history, \"/admin/dashboard\")}\r\n            >\r\n              Dashboard\r\n            </Link>\r\n          </li>\r\n        )}\r\n\r\n        {!isAuthenticated() && (\r\n          <Fragment>\r\n            <li className=\"nav-item\">\r\n              <Link\r\n                to=\"/signin\"\r\n                className=\"nav-link\"\r\n                style={isActive(history, \"/signin\")}\r\n              >\r\n                Signin\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link\r\n                to=\"/signup\"\r\n                className=\"nav-link\"\r\n                style={isActive(history, \"/signup\")}\r\n              >\r\n                Signup\r\n              </Link>\r\n            </li>\r\n          </Fragment>\r\n        )}\r\n        {isAuthenticated() && (\r\n          <Fragment>\r\n            <li className=\"nav-item\">\r\n              <span\r\n                onClick={() =>\r\n                  signout(() => {\r\n                    history.push(\"/signin\");\r\n                  })\r\n                }\r\n                className=\"nav-link\"\r\n                style={{ cursor: \"pointer\", color: \"#ffffff\" }}\r\n              >\r\n                Signout\r\n              </span>\r\n            </li>\r\n          </Fragment>\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Menu);\r\n","import React from \"react\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport Signup from \"./user/Signup\";\r\nimport Signin from \"./user/Signin\";\r\nimport Home from \"./core/Home\";\r\nimport PrivateRoute from \"./auth/PrivateRoute\";\r\nimport AdminRoute from \"./auth/AdminRoute\";\r\nimport Dashboard from \"./user/UserDashboard\";\r\nimport AdminDashboard from \"./user/AdminDashboard\";\r\nimport AddCategory from \"./admin/AddCategory\";\r\nimport AddProduct from \"./admin/AddProduct\";\r\nimport Shop from \"./core/Shop\";\r\nimport Product from \"./core/Product\";\r\nimport Cart from \"./core/Cart\";\r\nimport Orders from \"./admin/Orders\";\r\nimport Profile from \"./user/Profile\";\r\nimport ManageProducts from \"./admin/ManageProducts\";\r\nimport UpdateProduct from \"./admin/UpdateProduct\";\r\n\r\nconst Routes = () => {\r\n  return (\r\n    //The BrowserRouter allows you to access the props in the path (i.e. queries in the URL)\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Home} />\r\n        <Route exact path=\"/signin\" component={Signin} />\r\n        <Route exact path=\"/signup\" component={Signup} />\r\n        <Route exact path=\"/shop\" component={Shop} />\r\n        <PrivateRoute exact path=\"/user/dashboard\" component={Dashboard} />\r\n        <AdminRoute exact path=\"/admin/dashboard\" component={AdminDashboard} />\r\n        <AdminRoute exact path=\"/create/category\" component={AddCategory} />\r\n        <AdminRoute exact path=\"/create/product\" component={AddProduct} />\r\n        <Route exact path=\"/product/:productId\" component={Product} />\r\n        <Route exact path=\"/cart\" component={Cart} />\r\n        <AdminRoute exact path=\"/admin/orders\" component={Orders} />\r\n        <PrivateRoute exact path=\"/profile/:userId\" component={Profile} />\r\n        <AdminRoute exact path=\"/admin/products\" component={ManageProducts} />\r\n        <AdminRoute\r\n          exact\r\n          path=\"/admin/product/update/:productId\"\r\n          component={UpdateProduct}\r\n        />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default Routes;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport Routes from \"./Routes\";\n\nReactDOM.render(<Routes />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}